{
  "name": "Queryjs",
  "tagline": "Javascript library to work with sql database based on query-dsl approach",
  "body": "queryjs\r\n=======\r\nJavascript promise-based library to work with relational database following query-dsl approach\r\n\r\nWhy?\r\n======\r\n- Safe query-like syntax\r\n- Easy-to-use promise based API\r\n- Automatic entities mapping with one-to-one and many-to-many support\r\n- Multiple database support (sqlite, websql)\r\n- debuggable sql queries (pretty-printed sql queries with timing in milliseconds)\r\n\r\nInstall\r\n--------\r\nInstall as a bower dependency\r\n```\r\nbower install sql-queryjs\r\n```\r\nAdd to your index.html\r\n``` html\r\n<script src=\"bower_components/queryjs/dist/js/queryjs.min.js\"></script>\r\n```\r\n\r\nConfiguration\r\n--------------\r\nCurrent implementation designed and supports following databases:\r\n- sqlite\r\n- websql (as a fallback of sqlite)\r\n\r\n``` javascript\r\n  // qjs.store.cordovasql.config(dbname, dbversion, description, size, backgroundProcessing, iOSLocation);\r\n  queryjs.store.cordovasql.config('track', '0.0.1', 'VesterTrack Database', 5 * 1024 * 1024, 0, 2);\r\n```\r\n\r\nAngularjs Integration\r\n---------------------\r\nEnable angular integration by adding queryjs.angular.js:\r\n``` html\r\n<script src=\"bower_components/queryjs/dist/js/queryjs.min.js\"></script>\r\n<script src=\"bower_components/queryjs/dist/js/queryjs.angular.js\"></script>\r\n```\r\nor replace queryjs.min.js with the bundle:\r\n\r\n``` html\r\n<script src=\"bower_components/queryjs/dist/js/queryjs.bundle.min.js\"></script>\r\n```\r\nInclude angular module\r\n``` javascript\r\n  angular.module('app', ['queryjs']);\r\n```\r\n\r\nDefining entities\r\n-----------------\r\n\r\n``` javascript\r\n  var Types = queryjs.SqlTypes;\r\n  var Order = queryjs.define('order', {\r\n            id: Types.TEXT,\r\n            creationDate: Types.DATE,\r\n            processed: Types.BOOL,\r\n            authorId: Types.TEXT,\r\n            metadata: Types.JSON\r\n        });\r\n```\r\n\r\nSelect query\r\n------------\r\n\r\n``` javascript\r\n  queryjs.from(Order)\r\n      .where(Order.processed.eq(true))\r\n      .list()\r\n      .then(function (orders) {\r\n        console.log('Found', orders.length, 'processed orders in the database')\r\n      })\r\n```\r\nRelationships\r\n-------------\r\nCurrent version of the queryjs supports 2 types of relationships\r\n-one to one (many to one)\r\n-one to many\r\n\r\n####One to One\r\n``` javascript\r\n var User = queryjs.define('user', {\r\n            id: Types.TEXT,\r\n            email: Types.TEXT\r\n        });\r\n      \r\n  Order.hasOne(Order, 'author');\r\n\r\n  queryjs.from(Order)\r\n      .join(Author).on(Order.authorId.eq(Author.id))\r\n      .first()\r\n      .then(function onSccuess(order) {\r\n        console.log(order);\r\n      });\r\n\r\n```\r\nExample of produced output:\r\n\r\n``` json\r\n  {\r\n    \"id\": \"order1\",\r\n    \"authorId\": \"user1\",\r\n    \"author\": {\r\n      \"id\": \"user1\",\r\n      \"email\": \"john@johnson.com\"\r\n    }\r\n  }\r\n```\r\n\r\n####One to Many\r\n``` javascript\r\n var OrderItem = queryjs.define('order_item', {\r\n            id: Types.TEXT,\r\n            name: Types.TEXT,\r\n            price: Types.INT,\r\n            oderId: Type.TEXT\r\n        });\r\n      \r\n  Order.hasMany(OrderItem, 'items');\r\n\r\n  queryjs.from(Order)\r\n      .leftJoin(OrderItem).on(Order.id.eq(OrderItem.orderId))\r\n      .first()\r\n      .then(function onSccuess(order) {\r\n        console.log(order);\r\n      });\r\n\r\n```\r\nExample of produced output:\r\n\r\n``` json\r\n  {\r\n    \"id\": \"order1\",\r\n    \"processed\": true,\r\n    \"items\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"orderId\": \"order1\",\r\n        \"name\": \"Item 1\",\r\n        \"price\": 111.2\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"orderId\": \"order1\",\r\n        \"name\": \"Item 2\",\r\n        \"price\": 311.2\r\n      }\r\n    ]\r\n  }\r\n```\r\n\r\nInsert query\r\n------------\r\n``` javascript\r\n  var newOrder = new Order({\r\n    id: '1',\r\n    creationDate: new Date(),\r\n    processed: false,\r\n    metadata: { itemsNumber: 1 }\r\n  });\r\n  \r\n  queryjs.insertInto(Order)\r\n      .values(newOrder)\r\n      .execute()\r\n      .then(function () {\r\n        console.log('Entity has been successfully inserted:', newOrder);\r\n      });\r\n```  \r\nUpdate query\r\n------------\r\n``` javascript\r\n  queryjs.update(Order)\r\n        .set(Order.processed, true)\r\n        .where(Order.id.eq('1'))\r\n        .execute()\r\n        .then(function () {\r\n          console.log('Update-query has been successfully executed');\r\n        });\r\n```        \r\nDelete query\r\n------------\r\n``` javascript\r\n  queryjs\r\n      .delete(Order)\r\n      .where(Order.id.eq('1'))\r\n      .execute()\r\n      .then(function () {\r\n        console.log('Entity \"1\" has been deleted');\r\n      });\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}